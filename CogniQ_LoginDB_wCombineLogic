import sqlite3

class User:
    def __init__(self, email, password, user_type):
        self.email = email
        self.password = password
        self.user_type = user_type
    
    def __str__(self):
        return f"User(email='{selff.email}', type='{self.user_type}')"
        self.db_name = db_name
        self._initialize_database()
        

class AuthSystem:
    def __init__(self, db_name="data/users.db"):
        self.db_name = db_name
        self._initialize_database()

    def _initialize_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                password TEXT NOT NULL,
                user_type TEXT NOT NULL
            )
        """)
        conn.commit()
        conn.close()

    def determine_user_type(self, email):
        if email.endswith('@admin.ph'):
            return 'admin'
        elif email.endswith('@gmail.com'):
            return 'user'
        else:
            raise ValueError("Only @admin.ph or @gmail.com domains are allowed.")

    def signup(self, email, password):
        try:
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE email = ?", (email,))
            if cursor.fetchone():
                raise ValueError("Email already registered.")

            user_type = self.determine_user_type(email)
            cursor.execute("INSERT INTO users (email, password, user_type) VALUES (?, ?, ?)",
                           (email, password, user_type))
            conn.commit()
            conn.close()

            print(f"Successfully registered {user_type}: {email}")
            return User(email, password, user_type)

        except ValueError as ve:
            print(f"Signup Failed: {ve}")
            return None
        except Exception as e:
            print(f"Unexpected Error: {e}")
            return None

    def login(self, email, password):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute("SELECT email, password, user_type FROM users WHERE email = ?", (email,))
        result = cursor.fetchone()
        conn.close()

        if result and result[1] == password:
            user = User(result[0], result[1], result[2])
            print(f"Login successful as {user.user_type}: {email}")
            return user
        else:
            print("Login failed: Invalid email or password.")
            return None
